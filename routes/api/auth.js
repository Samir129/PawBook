const express = require("express");
const router = express.Router();
const auth = require("../../middleware/auth");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const config = require("config");
const { body, validationResult } = require("express-validator");

const User = require("../../models/User");

/**
 * @route   GET api/auth
 * @desc    get user info based on jwt token in header
 * @access  Public
 */
router.get("/", auth, async (req, res) => {
  try {
    console.debug("Auth route begin");
    const user = await User.findById(req.user.id).select("-password");
    res.json(user); // default 200 status
  } catch (error) {
    console.error(error);
    res.status(500).json({ msg: "Internal Server Error" });
  }
});

/**
 * @route   POST api/auth
 * @desc    Authenticate user & get token
 * @access  Public
 */
router.post(
  "/",
  [
    body("username", "Username is required").exists(),
    body("password", "Password is required").exists(),
  ],
  async (req, res) => {
    // Access validation results
    const errors = validationResult(req);

    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { username, password } = req.body;

    try {
      // Valid request
      console.debug(req.body);
      let user = await User.findOne({ username });

      if (!user) {
        return res
          .status(400)
          .json({ errors: [{ msg: "Invalid Credentials" }] });
      }

      // Match password
      const isMatch = await bcrypt.compare(password, user.password);

      if (!isMatch) {
        return res
          .status(400)
          .json({ errors: [{ msg: "Invalid Credentials" }] });
      }

      
      const payload = {
        user: {
          id: user.id, // This id is the default generated by mongoDB
        },
      };

      jwt.sign(
        payload,
        config.get("jwtSecret"),
        { expiresIn: 36000 },
        (err, token) => {
          if (err) throw err;
          res.json({ token });
        }
      );

      console.debug("User authenticated");
    } catch (error) {
      console.error(error.message);
      res.status(500).json({ errors: [{ msg: "Internal Server Error" }] });
    }
  }
);

module.exports = router;
